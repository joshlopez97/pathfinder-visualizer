{"version":3,"sources":["components/space.jsx","constants.js","components/row.jsx","components/board.jsx","components/label.jsx","components/node.jsx","components/line.jsx","algorithms/random.js","algorithms/graph.js","algorithms/random_graph.js","algorithms/solver.js","algorithms/dijkstras.js","algorithms/heuristic.js","algorithms/astar.js","algorithms/breadth_first.js","components/graph.jsx","components/controls.jsx","components/icon.jsx","App.js","serviceWorker.js","index.js"],"names":["Space","id","this","props","row","column","className","Component","conf","navHeight","cellSize","cellsPerRow","nodeSize","draw_speed","solve_speed","lineClickRadius","algorithmLabels","algorithms","dijkstra","label","name","astar","breadth","startingAlgorithm","Row","indices","i","push","map","value","index","key","Board","state","numRows","determineRows","setRows","setState","window","addEventListener","removeEventListener","innerWidth","innerHeight","Label","AnimatedLabel","animatedLabel","class","style","height","width","d","text","delay","styled","div","keyframes","Node","animationDelay","type","labelClass","AnimatedNode","Line","angle","properties","makeLabel","lineHolderStyle","top","start","Y","left","X","transform","margin","labelStyle","AnimatedLine","animatedLine","graphRenderTime","duration","cmValue","Math","round","toFixed","Random","approxCellsPerColumn","randomSpace","cell","endY","space","getBoundingClientRect","scrollY","scrollX","list","integer","length","xRange","yRange","spaceRow","spaceColumn","document","getElementById","min","max","floor","random","GraphBuilder","end","speed","saveNodes","startName","endName","startCoords","endCoords","distanceBetween","_graph","nodes","position","neighbors","_start","_end","_speed","_currentNode","lines","nodeNames","_line_map","getNodeName","lineExists","diffX","diffY","atan2","PI","sqrt","pow","animation_duration","line","coords","copy","JSON","parse","stringify","Object","assign","RandomGraph","numLines","_size","build","randomPath","numBranchPoints","range","branchFrom","console","log","graph","branchOrigin","numBranches","branchLength","concat","choice","prevLine","currLine","makeLine","coordinates","GraphSolver","random_graph","_random_graph","_delay_map","currNodeName","neighborName","newLine","shortest_path","gb","exploration","heuristicFunction","keys","nodeName","node","heuristic","_solution","Dijkstras","solve","distances","paths","pq","TinyQueue","node1","node2","startNode","forEach","Infinity","currNode","pop","neighbor","currentPath","exploredLine","makeSolutionAnimation","Heuristics","distance","AStar","_openList","f","_openMap","_closedSet","Set","_gscore","_fscore","nodeData","getNextNode","applyHeuristic","distanceToGoal","addToOpenList","g","add","removeFromOpenList","neighborData","has","BreadthFirst","queue","N","shift","GraphButtons","appendSolutionToDOM","pathfinder","algorithm","explorationHolder","Graph","solutionHolder","solutionLabelsHolder","ReactDOM","unmountComponentAtNode","render","setParentRenderState","solution","appendGraphToDOM","container","graphHolder","seconds","setRenderState","setTimeout","onClick","clone","startEndNodeLabels","Controls","setAlgorithm","AlgorithmChooser","active","showOptions","values","choose","Icon","renderState","viewBox","xmlns","attributeName","attributeType","from","to","dur","repeatCount","stroke","App","bind","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7987db33.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './board.css';\n\nclass Space extends Component {\n  render() {\n    return (<td id={this.props.row + \"-\" + this.props.column}\n                className=\"space\">\n    </td>);\n  }\n}\n\nexport default Space;","const config = {\n  navHeight: 50,\n  cellSize: 5,\n  cellsPerRow: 50,\n  nodeSize: 4,\n  draw_speed: 1500,\n  solve_speed: 800,\n  lineClickRadius: 4,\n  algorithmLabels: {\n    \"Dijkstra's\": \"dijkstra\",\n    \"A* Search\": \"astar\"\n  },\n  algorithms: {\n    dijkstra: {\n      label: \"Dijkstra\",\n      name: \"dijkstra\"\n    },\n    astar: {\n      label: \"A* Search\",\n      name: \"astar\"\n    },\n    breadth: {\n      label: \"Breadth-First Search\",\n      name: \"breadth\"\n    }\n  },\n  startingAlgorithm: {\n    label: \"Dijkstra\",\n    name: \"dijkstra\"\n  }\n};\n\nexport const conf = config;","import React, {Component} from 'react';\nimport Space from \"./space\";\nimport {conf} from \"../constants\";\nimport './board.css';\n\n\nclass Row extends Component {\n  render() {\n    let indices = [];\n    for (let i = 0; i < conf.cellsPerRow; i++)\n    {\n      indices.push(i);\n    }\n    return (<tr id={\"row-\" + this.props.row} className=\"space-row\">\n      {indices.map((value, index) => {\n        return <Space row={this.props.row} column={index} key={index}/>\n      })}\n    </tr>);\n  }\n}\n\nexport default Row;","import React, {Component} from 'react';\nimport Row from \"./row\";\nimport {conf} from '../constants';\nimport './board.css';\n\nclass Board extends Component {\n  state = {numRows: Board.determineRows()};\n\n  setRows = () => {\n    this.setState({numRows: Board.determineRows()})\n  };\n\n  static determineRows() {\n    const cellSize = window.innerWidth / conf.cellsPerRow;\n    return window.innerHeight / cellSize;\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setRows);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setRows);\n  }\n\n  render() {\n    const indices = [];\n    for (let i = 0; i < this.state.numRows; i++)\n    {\n      indices.push(i);\n    }\n    return (\n      <div className=\"board\">\n        <table className=\"spaces-holder\">\n          <tbody>\n          {indices.map((value, index) => {\n            return <Row row={index} key={index}/>\n          })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React, {Component} from 'react';\nimport {keyframes} from \"styled-components\";\nimport styled from \"styled-components\";\nimport ReactDOM from \"react-dom\";\n\nclass Label extends Component {\n  get animatedLabel() {\n    return this.props.delay > 0 ? (styled.div`\n        animation: ${keyframes`\n          0% { opacity: 0 }\n          100% { opacity: 100 }\n        `} 0.5s linear forwards;\n        animation-delay: ${this.props.delay}s;\n    `) : styled.div``;\n  }\n  // componentDidMount() {\n  //   const currentLabel = ReactDOM.findDOMNode(this);\n  //   const position = currentLabel.getBoundingClientRect();\n  //   let newStyle = Object.assign({}, this.props.style);\n  //   newStyle.position = \"absolute\";\n  //   newStyle.top = position.top;\n  //   newStyle.left = position.left;\n  //   ReactDOM.render(<Label class={this.props.class} style={newStyle} text={this.props.text}/>, document.getElementById(\"labels\"));\n  // }\n\n  render() {\n    const AnimatedLabel = this.animatedLabel;\n    return (\n      <AnimatedLabel className={`label ${!!this.props.class ? this.props.class : \"\"}`} style={this.props.style}>\n        <svg className=\"caret-holder\" height=\"5\" width=\"8\">\n          <path d=\"M0 5 L4 0 L8 5\"/>\n        </svg>\n        <span className=\"label-value\">{this.props.text}</span>\n      </AnimatedLabel>\n    );\n  }\n}\n\nexport default Label;","import React, {Component} from 'react';\nimport './graph.css';\nimport Label from \"./label\";\nimport {keyframes} from \"styled-components\";\nimport styled from \"styled-components\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.style = this.props.style || {};\n    this.style.animationDelay = `${this.props.delay || 0}s`;\n    this.state = {type: this.props.type || \"normal\"};\n    this.labelClass = \"\";\n    if (this.props.type === 'start' || this.props.type === 'end') {\n      this.labelClass = this.props.type;\n    }\n  }\n\n\n  render() {\n    const fadeIn = () => keyframes`\n        0% {\n            opacity: 0\n        }\n        100% {\n            opacity: 100\n        }\n    `;\n    const AnimatedNode = styled.div`\n        animation: ${fadeIn} 0.5s linear forwards;\n        animation-delay: ${this.style.animationDelay};\n    `;\n    return (\n      <div className={`node-holder ${this.state.type}`}>\n        {!!this.props.label ?\n          <Label class={this.labelClass} type={this.state.type} style={this.props.style} text={this.props.label}/> : \"\"}\n        <AnimatedNode style={this.props.style} className={`node ${this.state.type}`}/>\n      </div>\n    );\n  }\n}\n\nexport default Node;","import React, {Component} from 'react';\nimport styled, {keyframes} from 'styled-components';\nimport {conf} from '../constants';\nimport './graph.css';\nimport Node from \"./node\";\nimport Label from \"./label\";\n\nclass Line extends Component {\n  constructor(props) {\n    super(props);\n    this.angle = props.properties.angle;\n    this.width = props.properties.width;\n    this.label = Line.makeLabel(this.width);\n    this.lineHolderStyle = {\n      width: this.width,\n      top: this.props.start.Y - conf.navHeight,\n      left: this.props.start.X,\n      transform: `rotate(${this.angle}deg`,\n      height: conf.lineClickRadius * 2,\n      margin: `${conf.lineClickRadius * -1}px 0`\n    };\n    this.labelStyle = {\n      transform: `rotate(${-1 * this.angle}deg`,\n      top: conf.lineClickRadius\n    };\n  }\n\n  static makeLabel(width) {\n    let cmValue = width  * 2.54 / 96;\n    return `${cmValue > 10 ? Math.round(cmValue) : cmValue.toFixed(1)} cm`;\n  }\n\n  get animatedLine() {\n    const growLine = () => keyframes`\n        0% { width: 0 }\n        100% { width: 100% }\n    `;\n    return (styled.div`\n        animation: ${growLine} ${this.props.properties.duration}s linear forwards;\n        animation-delay: ${this.props.delay}s;\n    `);\n  }\n\n  render() {\n    const AnimatedLine = this.animatedLine;\n    return (\n      <div className=\"line-container\">\n        <div style={this.lineHolderStyle} className={\"line-holder\" + (this.props.type === 'solve-label' ? ' label-only' : '')}>\n          <div style={this.labelStyle} className=\"label-holder\">\n            <Label text={this.label} delay={this.props.type === 'solve' || this.props.type === 'solve-label' ? this.props.graphRenderTime : 0}/>\n          </div>\n          <Node delay={this.props.delay}/>\n          <Node delay={this.props.delay + this.props.properties.duration} type={\"right\"}/>\n          <AnimatedLine className=\"line\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Line;","import {conf} from \"../constants\";\n\nexport default class Random {\n  static coordinates()\n  {\n    const approxCellsPerColumn = (window.innerHeight - conf.navHeight) / (window.innerWidth / conf.cellsPerRow);\n    const randomSpace = Random.cell(\n      [1, conf.cellsPerRow - 2],\n      [1, approxCellsPerColumn - 2]);\n    let endY = randomSpace.space.getBoundingClientRect().top + window.scrollY;\n    let endX = randomSpace.space.getBoundingClientRect().left + window.scrollX;\n    return {X: endX, Y: endY};\n  }\n\n  static choice(list) {\n    return list[Random.integer(0, list.length - 1)];\n  }\n  static cell(xRange, yRange) {\n    let spaceRow = Random.integer(yRange[0], yRange[1]);\n    let spaceColumn = Random.integer(xRange[0], xRange[1]);\n    let id = spaceRow + '-' + spaceColumn;\n    return {space: document.getElementById(id), row: spaceRow, column: spaceColumn};\n  }\n\n  static integer(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}","export default class GraphBuilder {\n  constructor(start, end, speed) {\n    this._start = start;\n    this._end = end;\n    this._speed = speed;\n    this._currentNode = 1;\n    this._graph = {\n      lines: [],\n      nodes: {},\n      nodeNames: {},\n      start: start,\n      end: end,\n      duration: 0\n    };\n    this._line_map = {};\n    this._graph.start.name = this.getNodeName(start);\n    this._graph.end.name = this.getNodeName(end);\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  get start() {\n    return this._start;\n  }\n\n  get end() {\n    return this._end;\n  }\n\n  saveNodes = function(startName, endName, startCoords, endCoords, distanceBetween) {\n    if (!(startName in this._graph.nodes)) {\n      this._graph.nodes[startName] = {\n        position: startCoords,\n        neighbors: {}\n      }\n    }\n    if (!(endName in this._graph.nodes)) {\n      this._graph.nodes[endName] = {\n        position: endCoords,\n        neighbors: {}\n      }\n    }\n    this._graph.nodes[startName].neighbors[endName] = distanceBetween;\n    this._graph.nodes[endName].neighbors[startName] = distanceBetween;\n  };\n\n  makeLine(startCoords, endCoords, delay) {\n    const startName = this.getNodeName(startCoords);\n    const endName = this.getNodeName(endCoords);\n    if (!this.lineExists(startName, endName))\n    {\n      const diffX = endCoords.X - startCoords.X,\n        diffY = endCoords.Y - startCoords.Y;\n      const angle = Math.atan2(diffY, diffX) * (180 / Math.PI);\n      const width = Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2));\n      const animation_duration = width / this._speed;\n      this.saveNodes(startName, endName, startCoords, endCoords, width);\n      this._graph.duration = Math.max(this._graph.duration, delay + animation_duration);\n      const line = {\n        start: startCoords,\n        end: endCoords,\n        delay: delay,\n        properties: {\n          angle: angle,\n          width: width,\n          duration: animation_duration\n        }\n      };\n      this._graph.lines.push(line);\n      this._line_map[`${startName}-${endName}`] = line;\n      return line;\n    }\n    return this._line_map[`${startName}-${endName}`] || this._line_map[`${endName}-${startName}`];\n  }\n\n  getNodeName(coords) {\n    return typeof this._graph.nodeNames[`${coords.X},${coords.Y}`] === 'undefined'\n      ? this._graph.nodeNames[`${coords.X},${coords.Y}`] = `N${this._currentNode++}`\n      : this._graph.nodeNames[`${coords.X},${coords.Y}`];\n  }\n\n  lineExists(start, end) {\n    return !!this._line_map[`${start}-${end}`] || !!this._line_map[`${end}-${start}`];\n  }\n\n  clone() {\n    let copy = new GraphBuilder(this._start, this._end, this._speed);\n    copy._currentNode = this._currentNode;\n    copy._graph = JSON.parse(JSON.stringify(this._graph));\n    copy._line_map = Object.assign({}, this._line_map);\n    return copy;\n  }\n}","import Random from \"./random\";\nimport GraphBuilder from \"./graph\";\nimport {conf} from '../constants';\n\nexport default class RandomGraph extends GraphBuilder {\n  constructor(start, end, numLines) {\n    super(start, end, conf.draw_speed);\n    this._size = numLines;\n    this.build();\n  }\n\n  build() {\n    let lines = this.randomPath(this._start, this._end);\n    const numBranchPoints = Math.floor(this._size / 2.5),\n      range = Math.floor(lines.length / numBranchPoints);\n    for (let i = 0; i < numBranchPoints; i++) {\n      lines = this.branchFrom(lines[Random.integer(i * range, (i + 1) * range)], lines, Random.integer(2, 4));\n    }\n    console.log(this.graph);\n    return this._graph;\n  }\n\n  branchFrom(branchOrigin, lines, numBranches, branchLength = 3) {\n    for (let i = 0; i < numBranches; i++) {\n      lines = lines.concat(this.randomPath(branchOrigin.start, Random.choice(lines).start, branchLength, branchOrigin.delay));\n    }\n    return lines;\n  }\n\n  randomPath(start, end, numLines = 10, delay = 0) {\n    let lines = [];\n    let prevLine = {}, currLine = this.makeLine(start, Random.coordinates(), delay);\n    for (let i = 0; i < numLines; i++) {\n      lines.push(currLine);\n      prevLine = Object.assign({}, currLine);\n      currLine = this.makeLine(prevLine.end, Random.coordinates(), prevLine.delay + prevLine.properties.duration);\n    }\n    currLine = this.makeLine(prevLine.end, end, prevLine.delay + prevLine.properties.duration);\n    lines.push(currLine);\n    return lines;\n  }\n}","import GraphBuilder from \"./graph\";\nimport {conf} from '../constants';\n\nexport default class GraphSolver extends GraphBuilder {\n  constructor(random_graph) {\n    super(random_graph.start, random_graph.end, conf.solve_speed);\n    this._graph.lines = [];\n    this._random_graph = random_graph;\n    this._delay_map = {};\n  }\n\n  get random_graph() {\n    return this._random_graph;\n  }\n\n  get exploration() {\n    return this._graph;\n  }\n\n  get solution() {\n    return this._solution.graph;\n  }\n\n  exploredLine(currNodeName, neighborName) {\n    let delay = this._delay_map[currNodeName] || 0;\n    let newLine = this.makeLine(this.random_graph.nodes[currNodeName].position, this.random_graph.nodes[neighborName].position, delay);\n    this._delay_map[neighborName] = newLine.delay + newLine.properties.duration;\n  }\n\n  makeSolutionAnimation(shortest_path) {\n    let gb = new GraphBuilder(this.start, this.end, conf.draw_speed);\n    let delay = this.exploration.duration;\n    let prevLine = {}, currLine = gb.makeLine(this.start, this.random_graph.nodes[shortest_path[0]].position, delay);\n    for (let i = 1; i < shortest_path.length; i++) {\n      prevLine = Object.assign({}, currLine);\n      currLine = gb.makeLine(prevLine.end, this.random_graph.nodes[shortest_path[i]].position, prevLine.delay + prevLine.properties.duration);\n    }\n    return gb;\n  }\n\n  applyHeuristic(heuristicFunction) {\n    Object.keys(this.random_graph.nodes).map(nodeName => {\n      let node = this.random_graph.nodes[nodeName];\n      node.heuristic = heuristicFunction(node, this.random_graph);\n    });\n  }\n}","import TinyQueue from 'tinyqueue';\nimport GraphSolver from \"./solver\";\n\nexport default class Dijkstras extends GraphSolver {\n  constructor(random_graph) {\n    super(random_graph);\n    this._solution = this.solve();\n  }\n\n  solve() {\n    let distances = {};\n    let paths = {};\n    let pq = new TinyQueue([], (node1, node2) => {\n      return node1.value - node2.value;\n    });\n\n    const startNode = this.random_graph.start.name;\n    distances[startNode] = 0;\n    paths[startNode] = [];\n    pq.push({name: startNode, value: 0});\n    Object.keys(this.random_graph.nodes).forEach(node => {\n      if (node !== startNode) {\n        distances[node] = Infinity;\n        paths[node] = [];\n      }\n    });\n    while (pq.length > 0) {\n      let currNode = pq.pop().name;\n      Object.keys(this.random_graph.nodes[currNode].neighbors).forEach(neighbor => {\n        let currentPath = distances[currNode] + this.random_graph.nodes[currNode].neighbors[neighbor];\n        if (currentPath < distances[neighbor]) {\n          this.exploredLine(currNode, neighbor);\n          distances[neighbor] = currentPath;\n          paths[neighbor] = paths[currNode].concat([neighbor]);\n          pq.push({name: neighbor, value: distances[neighbor]});\n        }\n      });\n    }\n    let shortest_path = paths[this.end.name];\n\n    return this.makeSolutionAnimation(shortest_path);\n  }\n}","export default class Heuristics {\n  static distance(startCoords, endCoords) {\n    return Math.sqrt(Math.pow(startCoords.X - endCoords.X, 2) + Math.pow(startCoords.Y - endCoords.Y, 2))\n  }\n\n  static distanceToGoal(node, graph) {\n    return Heuristics.distance(node.position, graph.end);\n  };\n}","import GraphSolver from \"./solver\";\nimport Heuristics from \"./heuristic\";\nimport TinyQueue from \"tinyqueue\";\n\nexport default class AStar extends GraphSolver {\n  constructor(random_graph) {\n    super(random_graph);\n    this._openList = new TinyQueue([], (node1, node2) => {\n      return node1.f - node2.f;\n    });\n    this._openMap = {};\n    this._closedSet = new Set([]);\n    this._gscore = {};\n    this._fscore = {};\n    this._solution = this.solve();\n  }\n\n  addToOpenList(nodeData) {\n    console.log(\"add(\" + nodeData.name + \")\");\n    if (!!!nodeData.name) {\n      nodeData.name = this.random_graph.getNodeName(nodeData.position);\n    }\n    this._openList.push(nodeData);\n    this._openMap[nodeData.name] = nodeData;\n  }\n\n  removeFromOpenList(node) {\n    delete this._openMap[node];\n  }\n\n  getNextNode() {\n    let node = this._openList.pop();\n    if (!!node && !!node.name && !(node.name in this._openMap)) {\n      console.log(node.name + \" not found in \" + JSON.stringify(this._openMap));\n      return this.getNextNode();\n    }\n    console.log(\"popped \" + node);\n    return node;\n  }\n\n  solve() {\n    this.applyHeuristic(Heuristics.distanceToGoal);\n\n    this.addToOpenList({f: 0, g: 0, ...this.start});\n\n    let paths = {};\n    Object.keys(this.random_graph.nodes).forEach(node => {\n      paths[node] = [];\n      this._gscore[node] = Infinity\n    });\n    this._gscore[this.start.name] = 0;\n\n\n    while (Object.keys(this._openMap).length > 0) {\n      let currNode = this.getNextNode();\n\n      if (typeof currNode === 'undefined') {\n        console.log(\"no more nodes, ending\");\n        break;\n      }\n      if (currNode.name === this.end.name) {\n        console.log(\"found end \" + this.end.name);\n        break;\n      }\n      this._closedSet.add(currNode.name);\n      this.removeFromOpenList(currNode.name);\n      for (let neighborName of Object.keys(this.random_graph.nodes[currNode.name].neighbors)) {\n        let neighborData = this.random_graph.nodes[neighborName];\n        neighborData.name = neighborName;\n        neighborData.g = this._gscore[currNode.name] + this.random_graph.nodes[currNode.name].neighbors[neighborName];\n        neighborData.f = neighborData.g + neighborData.heuristic;\n        if (!this._closedSet.has(neighborName)) {\n          this.exploredLine(currNode.name, neighborName);\n          if (neighborData.g < this._gscore[neighborName]) {\n            this._gscore[neighborName] = neighborData.g;\n            this._fscore[neighborName] = neighborData.f;\n            paths[neighborName] = paths[currNode.name].concat([neighborName]);\n            if (!(neighborName in this._openMap)) {\n              this.addToOpenList(neighborData);\n            }\n          }\n        }\n      }\n    }\n    let shortest_path = paths[this.end.name];\n    return this.makeSolutionAnimation(shortest_path);\n  }\n}","import GraphSolver from \"./solver\";\n\nexport default class BreadthFirst extends GraphSolver {\n  constructor(random_graph) {\n    super(random_graph);\n    this._solution = this.solve();\n  }\n\n  solve() {\n    let paths = {};\n    let queue = [];\n\n    const startNode = this.random_graph.start.name;\n    paths[startNode] = [];\n\n    queue.push(startNode);\n    while (queue.length > 0) {\n      const N = queue.length;\n      for (let i = 0; i < N; i++) {\n        let currNode = queue.shift();\n        console.log(currNode);\n        if (currNode === this.random_graph.end.name) {\n          return this.makeSolutionAnimation(paths[this.end.name]);\n        }\n        let neighbors = this.random_graph.nodes[currNode].neighbors;\n        Object.keys(neighbors).forEach(neighbor => {\n          this.exploredLine(currNode, neighbor);\n          paths[neighbor] = paths[currNode].concat([neighbor]);\n          queue.push(neighbor);\n        });\n      }\n    }\n    let shortest_path = paths[this.end.name];\n\n    return this.makeSolutionAnimation(shortest_path);\n  }\n}","import React, {Component} from 'react';\nimport {conf} from '../constants';\nimport ReactDOM from 'react-dom';\nimport Line from \"./line\";\nimport Random from \"../algorithms/random\";\nimport RandomGraph from \"../algorithms/random_graph\";\nimport Node from \"./node\";\nimport Dijkstras from \"../algorithms/dijkstras\";\nimport AStar from \"../algorithms/astar\";\nimport BreadthFirst from \"../algorithms/breadth_first\";\n\nclass GraphButtons extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  get algorithm() {\n    console.log(this.random_graph.graph);\n    switch (this.props.algorithm) {\n      case \"dijkstra\":\n        return new Dijkstras(this.random_graph.clone().graph);\n      case \"astar\":\n        return new AStar(this.random_graph.clone().graph);\n      case \"breadth\":\n        return new BreadthFirst(this.random_graph.clone().graph);\n      default:\n        return null;\n    }\n  }\n\n  appendSolutionToDOM = () => {\n    if (!!this.random_graph) {\n      this.pathfinder = this.algorithm;\n      const explorationHolder = Graph.explorationHolder,\n        solutionHolder = Graph.solutionHolder,\n        solutionLabelsHolder = Graph.solutionLabelsHolder;\n      ReactDOM.unmountComponentAtNode(explorationHolder);\n      ReactDOM.unmountComponentAtNode(solutionHolder);\n      ReactDOM.unmountComponentAtNode(solutionLabelsHolder);\n      ReactDOM.render(<Graph graph={this.pathfinder.exploration}/>, explorationHolder, () => {\n        this.setParentRenderState(\"exploring\", this.pathfinder.exploration.duration);\n      });\n      ReactDOM.render(<Graph type={\"solve-label\"} graph={this.pathfinder.solution}/>, solutionLabelsHolder);\n      ReactDOM.render(<Graph type={\"solve\"} graph={this.pathfinder.solution}/>, solutionHolder);\n    }\n  };\n\n  appendGraphToDOM = () => {\n    this.random_graph = new RandomGraph(Random.coordinates(), Random.coordinates(), 20);\n    let container = Graph.graphHolder;\n    ReactDOM.unmountComponentAtNode(container);\n    ReactDOM.unmountComponentAtNode(Graph.explorationHolder);\n    ReactDOM.unmountComponentAtNode(Graph.solutionHolder);\n    ReactDOM.unmountComponentAtNode(Graph.solutionLabelsHolder);\n    ReactDOM.render(<Graph type={\"random\"} graph={this.random_graph.graph}/>, container, () => {\n      this.setParentRenderState(\"graphing\", this.random_graph.graph.duration);\n    });\n  };\n\n  setParentRenderState(state, seconds) {\n    this.props.setRenderState(state);\n    setTimeout(() => {\n      this.props.setRenderState(\"\");\n    }, seconds * 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"graph-buttons\">\n        <button onClick={this.appendSolutionToDOM}>Solve</button>\n        <button onClick={this.appendGraphToDOM}>New Graph</button>\n      </div>\n    )\n  }\n}\n\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.delay = this.props.delay || 0;\n  }\n\n  static get graphHolder() {\n    return document.getElementById('graph-holder');\n  }\n\n  static get explorationHolder() {\n    return document.getElementById('exploration-holder');\n  }\n\n  static get solutionHolder() {\n    return document.getElementById('solution-holder');\n  }\n\n  static get solutionLabelsHolder() {\n    return document.getElementById('solution-labels-holder');\n  }\n\n  get startEndNodeLabels() {\n    return (<div>\n      <Node type=\"start\" label=\"Start\" delay={this.props.graph.duration + this.delay} style={{\n        top: this.props.graph.start.Y - conf.navHeight,\n        left: this.props.graph.start.X,\n        animationDelay: `${this.delay + this.props.graph.duration}s`\n      }}/>\n      <Node type=\"end\" label=\"End\" delay={this.props.graph.duration + this.delay} style={{\n        top: this.props.graph.end.Y - conf.navHeight,\n        left: this.props.graph.end.X\n      }}/>\n    </div>);\n  }\n\n  render() {\n    const type = this.props.type,\n      graphRenderTime = this.props.graph.duration;\n    return (<div className=\"graph\" id=\"graph\">\n      {(this.props.type === \"random\" ? this.startEndNodeLabels : \"\")}\n      {\n        this.props.graph.lines.map((value, index) => {\n          return <Line start={value.start}\n                       end={value.end}\n                       delay={this.delay + value.delay}\n                       properties={value.properties}\n                       graphRenderTime={graphRenderTime}\n                       type={type}\n                       key={index}/>;\n        })\n      }\n    </div>);\n  }\n}\n\nexport default GraphButtons;","import React, {Component} from 'react';\nimport {conf} from '../constants';\n\nclass Controls extends Component {\n  render() {\n    return (\n      <div className=\"controls\">\n        <AlgorithmChooser setAlgorithm={this.props.setAlgorithm} algorithms={conf.algorithms}/>\n      </div>\n    );\n  }\n}\n\nclass AlgorithmChooser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {choice: conf.startingAlgorithm, active: false}\n  }\n\n  showOptions() {\n    this.setState(state => (Object.assign(state, {\n      active: !state.active\n    })));\n  }\n\n  choose(algorithm) {\n    this.setState({\n      active: false,\n      choice: algorithm\n    });\n    this.props.setAlgorithm(algorithm);\n  }\n\n  render() {\n    return (\n      <div className=\"algorithm-dropdown\">\n        <div onClick={() => this.showOptions()} className=\"algorithm-chooser button\">\n          <span>{this.state.choice.label}</span>\n          <div className=\"dropdown-caret-holder\">\n            <span className={`dropdown-caret${!this.state.active? \"\" : \" flipped\"}`}>&#9660;</span>\n          </div>\n        </div>\n        <div className={`algorithm-options${this.state.active? \"\" : \" hidden\"}`}>\n          {Object.values(this.props.algorithms).map((algorithm, index) => {\n            return <div onClick={() => this.choose(algorithm)} className=\"algorithm-option button\" key={index}>{algorithm.label}</div>;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Controls;","import React, {Component} from 'react';\n\nclass Icon extends Component {\n  render() {\n    return (\n      <div className=\"icon-holder\">\n        <svg className={`icon ${this.props.renderState}`} width=\"50\" height=\"50\" viewBox=\"-5 -5 60 60\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n          <path transform=\"rotate(0 24.750003814697266,24.46666717529297) \"\n                d=\"m24.58065,17.58091c-3.0637,0 -5.65444,2.00352 -6.54757,4.77002m0,4.22994c0.89364,2.7665 3.48387,4.77054 6.54808,4.77156c3.80157,-0.00102 6.88525,-3.08266 6.88576,-6.88576c-0.00102,-3.80362 -3.0847,-6.88474 -6.88627,-6.88576\"\n                className=\"inner\">\n            {this.props.renderState !== \"\" ?\n              <animateTransform attributeName=\"transform\"\n                                attributeType=\"XML\"\n                                type=\"rotate\"\n                                from=\"180 24.750003814697266,24.46666717529297\"\n                                to=\"540 24.750003814697266,24.46666717529297\"\n                                dur=\"0.5s\"\n                                repeatCount=\"indefinite\"/> : \"\"}\n\n          </path>\n          <path stroke=\"#e605ff\" transform=\"rotate(180 24.52094841003418,25.00000381469727) \"\n                d=\"m24.1499,9.91326c-6.71258,0 -12.38891,4.38972 -14.34576,10.45114m0,9.26782c1.95797,6.06141 7.63318,10.45227 14.34689,10.45451c8.32926,-0.00224 15.08562,-6.75412 15.08673,-15.08674c-0.00224,-8.33375 -6.7586,-15.0845 -15.08786,-15.08674\"\n                className=\"middle\">\n            {this.props.renderState !== \"\" ?\n              <animateTransform attributeName=\"transform\"\n                                attributeType=\"XML\"\n                                type=\"rotate\"\n                                from=\"180 24.52094841003418,25.00000381469727\"\n                                to=\"-180 24.52094841003418,25.00000381469727\"\n                                dur=\"0.5s\"\n                                repeatCount=\"indefinite\"/> : \"\"}\n\n          </path>\n          <path\n            d=\"m24.44616,2.48102c-10.01942,0 -18.4921,6.55225 -21.41297,15.59973m0,13.83347c2.92253,9.04747 11.39355,15.60141 21.41465,15.60476c12.43253,-0.00335 22.51731,-10.08143 22.51897,-22.51898c-0.00334,-12.43924 -10.08812,-22.51564 -22.52065,-22.51898\"\n            className=\"outer\">\n            {this.props.renderState !== \"\" ?\n              <animateTransform attributeName=\"transform\"\n                                attributeType=\"XML\"\n                                type=\"rotate\"\n                                from=\"0 24.99999809265136,24.99999809265137\"\n                                to=\"360 24.99999809265136,24.99999809265137\"\n                                dur=\"0.5s\"\n                                repeatCount=\"indefinite\"/> : \"\"}\n\n          </path>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default Icon;","import React, {Component} from 'react';\nimport './App.css';\nimport Board from \"./components/board\";\nimport GraphButtons from \"./components/graph\";\nimport Controls from \"./components/controls\";\nimport Icon from \"./components/icon\";\nimport {conf} from \"./constants\";\n\n\nexport default class App extends Component {\n  state = {renderState: \"\", algorithm: conf.startingAlgorithm.name};\n\n  setRenderState = function(renderState) {\n    this.setState(state => (Object.assign(state, {\n      renderState: renderState\n    })));\n  }.bind(this);\n\n  setAlgorithm = function(algorithm) {\n    this.setState(state => (Object.assign(state, {\n      algorithm: algorithm.name\n    })));\n  }.bind(this);\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navigation\">\n          <div className=\"nav-items\">\n            <GraphButtons algorithm={this.state.algorithm} setRenderState={this.setRenderState}/>\n            <Controls setAlgorithm={this.setAlgorithm}/>\n          </div>\n          <Icon renderState={this.state.renderState}/>\n        </div>\n        <div id=\"labels\"/>\n        <div className=\"graph-holder\" id=\"graph-holder\"/>\n        <div className=\"graph-holder\" id=\"exploration-holder\"/>\n        <div className=\"graph-holder\" id=\"solution-holder\"/>\n        <div className=\"graph-holder\" id=\"solution-labels-holder\"/>\n        <Board/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}